name: Bazel Build and Test

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.adoc'
      - '.goosehints'
      - '.gitattributes'
      - '.gitignore'
      - '.editorconfig'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.adoc'
      - '.goosehints'
      - '.gitattributes'
      - '.gitignore'
      - '.editorconfig'

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CACHE_VERSION: v1
  BAZEL_CACHE_VERSION: v1

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/setup-bazel
        with:
          cache-key: ${{ github.workflow }}-lint
          cache-version: ${{ env.BAZEL_CACHE_VERSION }}
      - name: Run format checks
        run: bazel test //:format_test
      - name: Generate LSP config
        run: |
          bazel run //:lsp_setup
          bazel run //:compile_commands
      - uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.3
        with:
          name: ide-config
          path: |
            .vscode/
            compile_commands.json
            .clangd
          if-no-files-found: ignore

  tool-setup:
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2022]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/setup-tools
        with:
          os: ${{ matrix.os }}
          cache-version: ${{ env.CACHE_VERSION }}

  test:
    needs: [lint, tool-setup]
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2022]
        profile: [personal, work]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/setup-tools
        with:
          os: ${{ matrix.os }}
          cache-version: ${{ env.CACHE_VERSION }}
      - uses: ./.github/actions/setup-bazel
        with:
          cache-key: ${{ github.workflow }}-${{ matrix.os }}-${{ matrix.profile }}
          cache-version: ${{ env.BAZEL_CACHE_VERSION }}

      - name: Build and test
        run: |
          echo "=== Building all packages ==="
          bazel ${BAZEL_STARTUP_OPTS} build //... \
            --//config:profile=${{ matrix.profile }} \
            ${BAZEL_BUILD_OPTS}

          echo "=== Running all tests ==="
          bazel ${BAZEL_STARTUP_OPTS} test //... \
            --//config:profile=${{ matrix.profile }} \
            ${BAZEL_TEST_OPTS} \
            ${BAZEL_BUILD_OPTS}

          echo "=== Running quality checks ==="
          bazel ${BAZEL_STARTUP_OPTS} test //:quality_checks \
            --//config:profile=${{ matrix.profile }} \
            --test_output=all \
            ${BAZEL_BUILD_OPTS}

      - name: Generate coverage (Ubuntu + personal only)
        if: matrix.os == 'ubuntu-24.04' && matrix.profile == 'personal'
        run: |
          bazel coverage //... \
            --//config:profile=${{ matrix.profile }} \
            --combined_report=lcov || echo "Coverage generation failed"

      - uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.profile }}
          path: |
            bazel-testlogs/**/test.xml
            bazel-testlogs/**/test.log
            bazel-out/**/coverage.dat
          if-no-files-found: ignore

      - uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.3
        if: matrix.profile == 'personal'
        with:
          name: generated-configs-${{ matrix.os }}
          path: |
            bazel-bin/**/tmux.conf
            bazel-bin/**/.vimrc
            bazel-bin/**/.zshrc
            bazel-bin/**/.gitconfig
            bazel-bin/**/init.lua
          if-no-files-found: ignore

  integration:
    needs: [test]
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ./.github/actions/setup-tools
        with:
          os: ubuntu-24.04
          cache-version: ${{ env.CACHE_VERSION }}
      - uses: ./.github/actions/setup-bazel
        with:
          cache-key: ${{ github.workflow }}-integration
          cache-version: ${{ env.BAZEL_CACHE_VERSION }}
      - name: Run integration tests
        run: ./scripts/integration-test.sh
      - name: Performance benchmarks
        run: |
          echo "=== Performance Benchmarks ==="
          time bazel build //...
          time bazel test //... --test_summary=detailed
          bazel info | grep cache || echo "Cache info not available"

  summary:
    if: always()
    needs: [lint, tool-setup, test, integration]
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Report results
        run: |
          echo "=== Test Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Tool setup: ${{ needs.tool-setup.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          else
            echo "✅ All tests completed successfully"
          fi
