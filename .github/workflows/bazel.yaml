name: Bazel Build and Test

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.adoc'
      - '!**.agents/**'
      - '.gitattributes'
      - '.gitignore'
      - '.editorconfig'

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  DEBIAN_FRONTEND: noninteractive
  APT_LISTCHANGES_FRONTEND: none

defaults:
  run:
    shell: bash

jobs:
  format:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: bazel-contrib/setup-bazel@4432ac8a2318fb254c5b9fe491b9d21a002d7122 # v0.15.0

      - name: Install required tools
        run: |
          # Install tools needed for toolchain discovery
          sudo apt-get update -qq
          sudo apt-get install -qq -y git tmux vim-nox zsh

          # Verify tools are available
          echo "=== Tool Verification ==="
          git --version
          tmux -V
          vim --version | head -1
          zsh --version

      - name: Check Bazel file formatting
        run: |
          echo "üîç Checking if Bazel files are properly formatted..."

          # Run the format test and capture both exit code and output
          if ! bazel test //:format_test --test_output=errors; then
            echo ""
            echo "‚ùå FORMATTING ISSUES DETECTED!"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo ""
            echo "üìã DETAILED FORMATTING ERRORS:"
            echo ""

            # Get the exact log path from bazel
            LOG_PATH=$(bazel info bazel-testlogs 2>/dev/null)/format_test/test.log
            if [[ -f "$LOG_PATH" ]]; then
              echo "Files with formatting issues:"
              echo ""
              cat "$LOG_PATH" | sed '/^exec /d' | sed '/^Executing tests/d' | sed '/^-\+$/d'
            else
              echo "‚ö†Ô∏è  Could not find detailed test log at: $LOG_PATH"
              echo "Run locally for full details: bazel test //:format_test"
            fi

            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üõ†Ô∏è  TO FIX THESE ISSUES:"
            echo ""
            echo "   1. Run the auto-formatter locally:"
            echo "      bazel run //:format"
            echo ""
            echo "   2. Review what was changed:"
            echo "      git diff"
            echo ""
            echo "   3. Commit the formatted files:"
            echo "      git add -A && git commit -m 'Fix Bazel file formatting'"
            echo ""
            echo "   4. Push your changes:"
            echo "      git push"
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            exit 1
          fi

          echo "‚úÖ All Bazel files are properly formatted"

  lint:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    needs: [format]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: bazel-contrib/setup-bazel@4432ac8a2318fb254c5b9fe491b9d21a002d7122 # v0.15.0

      - name: Install required tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y git tmux vim-nox zsh

      - name: Generate LSP config
        run: |
          echo "üîß Generating LSP configuration..."
          bazel build //:lsp_setup_vscode_settings //:lsp_setup_compile_commands
          echo "‚úÖ Generated settings.json and compile_commands.json"

  test:
    needs: [format, lint]
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-15]
        profile: [personal, work]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: bazel-contrib/setup-bazel@4432ac8a2318fb254c5b9fe491b9d21a002d7122 # v0.15.0

      - name: Install basic tools for testing
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            # Ubuntu - install via apt and snap
            sudo apt-get update -qq
            sudo apt-get install -qq -y git tmux vim-nox zsh
          elif [[ "${{ matrix.os }}" == "macos-15" ]]; then
            # macOS - most tools should already be available, install missing ones
            # git is pre-installed on GitHub runners
            # zsh is pre-installed on macOS
            if ! command -v tmux >/dev/null 2>&1; then
              brew install tmux
            fi
            if ! command -v vim >/dev/null 2>&1; then
              brew install vim
            fi
          fi

          # Verify tools are available
          echo "=== Tool Verification ==="
          git --version || echo "git not available"
          tmux -V || echo "tmux not available"
          vim --version | head -1 || echo "vim not available"
          zsh --version || echo "zsh not available"

      - name: Build and test
        run: |
          echo "=== Building all packages ==="
          bazel build //... --//config:profile=${{ matrix.profile }}

          echo "=== Running all tests ==="
          bazel test //... --//config:profile=${{ matrix.profile }}

  summary:
    if: always()
    needs: [format, lint, test]
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Report results
        run: |
          echo "=== Test Summary ==="
          echo "Format: ${{ needs.format.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"

          if [[ "${{ needs.format.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Critical jobs failed"
            exit 1
          else
            echo "‚úÖ All pipeline steps completed successfully"
          fi
