package(default_visibility = ["//visibility:public"])

# OS Platform selectors
config_setting(
    name = "macos",
    constraint_values = ["@platforms//os:macos"],
)

config_setting(
    name = "linux",
    constraint_values = ["@platforms//os:linux"],
)

config_setting(
    name = "windows",
    constraint_values = ["@platforms//os:windows"],
)

# WSL detection is trickier, but we can approximate with a custom flag
config_setting(
    name = "wsl",
    # In a real setting, you'd detect this with a more sophisticated check
    define_values = {"WSL": "1"},
)

# Custom architecture settings
config_setting(
    name = "arm64",
    constraint_values = ["@platforms//cpu:arm64"],
)

config_setting(
    name = "x86_64",
    constraint_values = ["@platforms//cpu:x86_64"],
)

# Tool detection flags - these are set by detection rules
config_setting(
    name = "has_vscode",
    define_values = {"HAS_VSCODE": "true"},
)

# Helper for when VSCode is not detected
config_setting(
    name = "no_vscode",
    define_values = {"HAS_VSCODE": "false"},
)

# Combined platform and tool detection selectors
config_setting(
    name = "macos_has_vscode",
    constraint_values = ["@platforms//os:macos"],
    define_values = {"HAS_VSCODE": "true"},
)

config_setting(
    name = "linux_has_vscode",
    constraint_values = ["@platforms//os:linux"],
    define_values = {"HAS_VSCODE": "true"},
)

config_setting(
    name = "windows_has_vscode",
    constraint_values = ["@platforms//os:windows"],
    define_values = {"HAS_VSCODE": "true"},
)
