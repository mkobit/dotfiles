# Dotfiles development

## Purpose
This document defines the architecture, standards, and patterns for this dotfiles repository.

## Repository structure
- modules/: Starlark rules and macros (git/, rules/, tmux/, vim/)
- platforms/: Platform-specific BUILD.bazel files (Windows, WSL, macOS)
- variants/: Usage scenario targets (work_laptop, personal_desktop)
- tools/: Tool implementations and templates (git/, tmux/, vim/, neovim/, zsh/)
- bin/: Helper scripts for complex operations
- selectors/: Platform-specific conditional configuration

Each tool MUST have:
- modules/[tool]/: Rule definitions, providers, interfaces
- tools/[tool]/: Implementation, templates, targets

## Architecture
- Use Bazel 7.0+ with bzlmod for dependencies
- Keep modules independent to avoid circular dependencies
- Separate rule definitions (modules/) from implementations (tools/)
- Use provider interfaces for standardized configuration passing
- Define clear extension points for customization
- Do not create bespoke shell scripts

## Bazel Standards
- All operations MUST use Bazel commands
- All installations MUST use Bazel targets, not custom scripts
- Use MODULE.bazel instead of WORKSPACE
- Use select() for platform-specific configuration
- File extensions:
  - BUILD.bazel for BUILD files
  - .bzl for Starlark files with rules and macros
  - MODULE.bazel for bzlmod definitions
- Do not create bespoke shell scripts

## Configuration Management
- Use strongly-typed providers
- Ensure deterministic file generation
- Configuration layers:
  1. Base: Common settings
  2. Platform: OS-specific settings
  3. Variant: Context-specific settings
- Do not create bespoke shell scripts

## Separation of concerns
- No work/private settings in repository
- Enable machine-specific configuration injection
- Support local extensions (e.g., ~/.gitconfig.local)
- Create isolated variant targets for different contexts

## Documentation
- Use AsciiDoctor (.adoc) for documentation
- Each module needs README.adoc with purpose, options, examples
- Document inter-module relationships
- Include diagrams for complex configurations

## Development process
- Build to verify generation logic: `bazel build //...`
- Run tests to verify correctness: `bazel test //...`
- Use build-time configuration over runtime detection
- Use GitHub Actions for CI/CD
- Do not create bespoke shell scripts

## Testing
- Use Bazel's test rules
- Test cross-platform compatibility
- Use toolchains for each module

## Implementation patterns
- Handle platform differences at BUILD-time
- Prefer pure Starlark implementations
- Use long command options for readability (--name vs -n)
- Maintain consistent naming between modules/ and tools/ directories

## Code Generation
- All generation MUST use Bazel rules and Starlark
- NO bespoke or ad-hoc shell scripts
- Implement all functionality through Starlark rules and macros
