# Dotfiles Development Guidelines

## Repository structure
- modules/: Starlark rules and macros (git/, rules/, tmux/, vim/)
- platforms/: Platform-specific BUILD files (Windows, WSL, macOS)
- variants/: Usage scenario targets (work_laptop, personal_desktop)
- tools/: Tool implementations and templates (git/, tmux/, vim/, neovim/, zsh/)
- bin/: Helper scripts for complex operations
- selectors/: Platform-specific conditional configuration

Each tool requires both:
- modules/[tool]/: Rule definitions, providers, interfaces
- tools/[tool]/: Implementation, templates, targets

## Architecture
- Use Bazel 7.0+ with bzlmod for dependencies
- Keep modules independent for parallel development
- Separate rule definitions (modules/) from implementations (tools/)
- Avoid circular dependencies
- Use provider interfaces for standardized configuration passing
- Define clear extension points for customization

## Bazel-first
- All operations through Bazel commands
- Handle installation via Bazel targets, not custom scripts
- Always provide print_paths targets
- Use MODULE.bazel instead of WORKSPACE
- Leverage select() statements for platform-specific configuration

## Configuration management
- Use strongly-typed providers
- Ensure deterministic, reproducible file generation
- Layer configurations:
  1. Base - Common settings
  2. Platform - OS-specific settings
  3. Variant - Context-specific settings
- Handle file paths properly across platforms

## Separation of concerns
- No work/private settings in repository
- Enable machine-specific configuration injection
- Support local extensions (e.g., ~/.gitconfig.local)
- Create isolated variant targets for different contexts

## Documentation
- Use AsciiDoctor (.adoc), not Markdown
- Write headings in sentence case
- Each module needs README.adoc with:
  - Purpose, options, examples, integration patterns
- Document inter-module relationships
- Include diagrams for complex configurations

## Development process
- Test generation before deployment
- Use build-time configuration over runtime detection
- Build all variants during testing
- Use GitHub Actions for CI/CD
- Create reproducible environments with .devcontainer

## Testing
- Create test targets for each module/tool
- Use Bazel's test framework
- Test cross-platform compatibility
- Validate generated configurations

## Troubleshooting
- Create diagnostic targets
- Implement verbose logging options
- Document common errors and solutions
- Provide version checking for external dependencies
- Document rollback procedures

## Implementation Patterns
- Use flat dictionaries with compound keys
- Handle platform differences at BUILD-time
- Prefer pure Starlark implementations
- Document only non-obvious configurations
- Use long command options for readability (--name vs -n)
- Consistent naming between modules/ and tools/ directories

## Scripts and Code Generation
- DO NOT write bespoke scripts - all generation MUST be in Bazel rules and Starlark
- Only write shell scripts if explicitly requested
- No ad-hoc shell scripts in this repository
- Implement all functionality through Starlark rules and macros

