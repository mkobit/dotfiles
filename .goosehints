# Dotfiles Development Guidelines

## Repository structure
- modules/: Contains .bzl files with reusable Starlark rules and macros for dotfiles management
- platforms/: Contains BUILD files defining Bazel platform targets for different OS (Windows, Ubuntu WSL, macOS)
- variants/: Contains BUILD files defining targets for different usage scenarios (work_laptop, personal_desktop, etc.)
- tools/: Contains subdirectories for specific tools (git, tmux, neovim, etc.) each with their own BUILD file and templates
- bin/: Contains helper scripts used by Starlark rules for complex operations

## Architecture
- Use Bazel 7.0+ with bzlmod for dependency management
- Organize by modules (git, vim, tmux, etc.)
- Each module should have its own BUILD.bazel and README.adoc
- Use the Starlark DSL to define module-specific rules
- Keep modules independent where possible for parallel development

## Bazel-first
- All operations should be runnable via Bazel commands
- Installation should be handled through Bazel targets, not custom scripts
- Focus on generation correctness before installation automation
- Use `bazel build`, `bazel run`, and `bazel test` as primary interfaces
- Always provide print_paths targets to show generated file locations

## Configuration management
- Use strongly-typed providers for configuration data
- Generated files should be deterministic and reproducible
- Support configuration for:
  1. Base - Common settings across all environments
  2. Platform - OS-specific settings (linux, macos, windows)
  3. Variant - Context-specific settings (work laptop, work remote machine, personal desktop, personal WSL environment, personal laptop)
- Use select() for platform detection
- Build and test must work on all platforms
- Handle file paths properly across different operating systems

## Separation of concerns
- Work/private settings must never be committed to the repository
- Work/private settings must be injectable from their respective machines, and must effectively combine with the in-repository configuration (to enable, disable, alter settings)
- Support local extensions (e.g., ~/.gitconfig.local) for private settings
- Use include directives for bringing in external configs when appropriate
- Create isolated variant targets for different contexts

## Documentation
- All documentation files must be written in AsciiDoctor (.adoc files), not Markdown
- Write headings in sentence case
- Include usage examples in documentation
- Describe module-specific configuration options
- Document how to integrate with existing tool ecosystems

## Development process
- Test configuration generation before deployment
- Favor build-time configuration over runtime detection
- Keep sensitive information out of the repository
- Build all variants during testing to ensure they work correctly
- Use consistent naming conventions across modules

## Implementation Patterns
- Default to flat dictionaries with compound keys for complex hierarchies
- Standardize on provider interfaces for module-specific configurations
- Handle platform differences via BUILD-time selection
- Prefer pure Starlark implementations
- Only document non-obvious configurations or settingn
    - Do not superfluously document code.
    - Do document program specific configurations and options
- Prefer long command line options in generated file outputs for readability and comprehension upon reading.
    - For example, instead of `-n` specify `--name` as the long optio
