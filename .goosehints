# Dotfiles Development Guidelines

## Project Architecture
- Use Bazel 7.0+ with bzlmod for dependency management
- Organize by modules (git, vim, tmux, etc.)
- Each module should have its own BUILD.bazel and README.adoc
- Use the Starlark DSL to define module-specific rules
- Keep modules independent where possible for parallel development

## Bazel-First Approach
- All operations should be runnable via Bazel commands
- Installation should be handled through Bazel targets, not custom scripts
- Focus on generation correctness before installation automation
- Use `bazel build` and `bazel run` as primary interfaces
- Always provide print_paths targets to show generated file locations

## Configuration Management
- Use strongly-typed providers for configuration data
- Generated files should be deterministic and reproducible
- Support three layers of configuration inheritance:
  1. Base - Common settings across all environments
  2. Platform - OS-specific settings (linux, macos, windows)
  3. Variant - Context-specific settings (work, personal)
- Use select() for platform detection
- Handle file paths properly across different operating systems

## Privacy and Separation of Concerns
- Work/private settings must never be committed to the repository
- Support local extensions (e.g., ~/.gitconfig.local) for private settings
- Use include directives for bringing in external configs when appropriate
- Create isolated variant targets for different contexts

## Documentation
- Document all modules using AsciiDoctor (.adoc files), not Markdown
- Include usage examples in documentation
- Describe module-specific configuration options
- Document how to integrate with existing tool ecosystems

## Development Process
- Test configuration generation before deployment
- Favor build-time configuration over runtime detection
- Keep sensitive information out of the repository
- Build all variants during testing to ensure they work correctly
- Use consistent naming conventions across modules

## Implementation Patterns
- Default to flat dictionaries with compound keys for complex hierarchies
- Use include/extends patterns for inheritance
- Standardize on provider interfaces for module-specific configurations
- Handle platform differences via BUILD-time selection
- Prefer pure Starlark implementation over shell script generation