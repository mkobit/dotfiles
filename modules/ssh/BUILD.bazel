load("//modules/ssh:ssh_rules.bzl", "ssh_config", "ssh_config_generator")

package(default_visibility = ["//visibility:public"])

ssh_config(
    name = "base_config",
    global_options = {
        "AddKeysToAgent": "yes",
        "HashKnownHosts": "yes",
        "ServerAliveInterval": "60",
        "ServerAliveCountMax": "30",
        "StrictHostKeyChecking": "ask",
        "IdentitiesOnly": "yes",
        "ForwardAgent": "no",
    },
    hosts = {
        "*.IdentityFile": "~/.ssh/id_ed25519",
    },
)

# Repository-specific configurations
ssh_config(
    name = "github_config",
    includes = [":base_config"],
    hosts = {
        "github.com.User": "git",
        "github.com.PreferredAuthentications": "publickey",
        "github.com.IdentityFile": "~/.ssh/id_github",
    },
)

# Complex GitHub configuration with multiple keys for different repositories
ssh_config(
    name = "complex_github_config",
    includes = [":base_config"],
    hosts = {
        "github.com.User": "git",
        "github.com.PreferredAuthentications": "publickey",
        "github.com.IdentityFile": "~/.ssh/id_github_default",

        "github.com-org1.HostName": "github.com",
        "github.com-org1.User": "git",
        "github.com-org1.IdentityFile": "~/.ssh/id_github_org1",
        "github.com-org1.PreferredAuthentications": "publickey",
        "github.com-org1.IdentitiesOnly": "yes",

        "github.com-project1.HostName": "github.com",
        "github.com-project1.User": "git",
        "github.com-project1.IdentityFile": "~/.ssh/id_github_project1",
        "github.com-project1.PreferredAuthentications": "publickey",
        "github.com-project1.IdentitiesOnly": "yes",
    },
)

ssh_config(
    name = "gitlab_config",
    includes = [":base_config"],
    hosts = {
        "gitlab.com.User": "git",
        "gitlab.com.PreferredAuthentications": "publickey",
        "gitlab.com.IdentityFile": "~/.ssh/id_gitlab",
    },
)

# Platform-specific configurations
ssh_config(
    name = "linux_config",
    includes = [":base_config", ":github_config", ":gitlab_config"],
    platform_options = {
        "linux.AddKeysToAgent": "yes",
    },
)

ssh_config(
    name = "macos_config",
    includes = [":base_config", ":github_config", ":gitlab_config"],
    platform_options = {
        "macos.AddKeysToAgent": "yes",
        "macos.UseKeychain": "yes",
    },
)

ssh_config(
    name = "windows_config",
    includes = [":base_config", ":github_config", ":gitlab_config"],
    platform_options = {
        "windows.AddKeysToAgent": "yes",
    },
)

# Personal variant configuration
ssh_config(
    name = "personal_config",
    includes = [":base_config"],
    variant_options = {
        "personal.global.ForwardAgent": "no",
    },
    hosts = {
        "personal.server.example.com.User": "personal_user",
        "personal.server.example.com.IdentityFile": "~/.ssh/id_personal",
    },
)

# Work variant configuration
ssh_config(
    name = "work_config",
    includes = [":base_config"],
    variant_options = {
        "work.global.ForwardAgent": "yes",
    },
    hosts = {
        "work.github.com.HostName": "github.com",
        "work.github.com.User": "git",
        "work.github.com.IdentityFile": "~/.ssh/id_work_github",
        
        "work.gitlab.com.HostName": "gitlab.com",
        "work.gitlab.com.User": "git",
        "work.gitlab.com.IdentityFile": "~/.ssh/id_work_gitlab",
        
        "internal-git.example.com.User": "work_user",
        "internal-git.example.com.IdentityFile": "~/.ssh/id_work_internal",
    },
)

# Generate base SSH config for current platform
ssh_config_generator(
    name = "ssh_config",
    config = select({
        "@platforms//os:linux": ":linux_config",
        "@platforms//os:macos": ":macos_config",
        "@platforms//os:windows": ":windows_config",
        "//conditions:default": ":base_config",
    }),
)

# Combine variants with platform-specific configs
ssh_config(
    name = "personal_linux_config",
    includes = [":linux_config", ":personal_config"],
)

ssh_config(
    name = "personal_macos_config",
    includes = [":macos_config", ":personal_config"],
)

ssh_config(
    name = "personal_windows_config",
    includes = [":windows_config", ":personal_config"],
)

ssh_config(
    name = "work_linux_config",
    includes = [":linux_config", ":work_config"],
)

ssh_config(
    name = "work_macos_config",
    includes = [":macos_config", ":work_config"],
)

ssh_config(
    name = "work_windows_config",
    includes = [":windows_config", ":work_config"],
)

# Generate variant-specific SSH config files
ssh_config_generator(
    name = "personal_ssh_config",
    config = select({
        "@platforms//os:linux": ":personal_linux_config",
        "@platforms//os:macos": ":personal_macos_config",
        "@platforms//os:windows": ":personal_windows_config",
        "//conditions:default": ":personal_config",
    }),
    variant = "personal",
)

ssh_config_generator(
    name = "work_ssh_config",
    config = select({
        "@platforms//os:linux": ":work_linux_config",
        "@platforms//os:macos": ":work_macos_config",
        "@platforms//os:windows": ":work_windows_config",
        "//conditions:default": ":work_config",
    }),
    variant = "work",
)

# Repository-specific configurations
ssh_config(
    name = "github_only_config",
    includes = [":github_config"],
)

ssh_config(
    name = "gitlab_only_config", 
    includes = [":gitlab_config"],
)

# Generate repository-specific SSH config files
ssh_config_generator(
    name = "github_ssh_config",
    config = ":github_only_config",
)

ssh_config_generator(
    name = "gitlab_ssh_config",
    config = ":gitlab_only_config",
)

# Generate complex GitHub config
ssh_config_generator(
    name = "complex_github_ssh_config",
    config = ":complex_github_config",
)

# Build all SSH configs
filegroup(
    name = "all_ssh_configs",
    srcs = [
        ":ssh_config",
        ":personal_ssh_config",
        ":work_ssh_config",
        ":github_ssh_config",
        ":gitlab_ssh_config",
        ":complex_github_ssh_config",
    ],
)

# Build everything for the module
filegroup(
    name = "ssh_all",
    srcs = [
        ":all_ssh_configs",
    ],
)