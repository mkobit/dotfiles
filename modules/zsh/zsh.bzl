"""
ZSH configuration rules and provider definitions.
"""

ZshConfigInfo = provider(
    doc = "Provider for ZSH configuration information",
    fields = {
        "config_files": "Dictionary of zsh configuration files",
        "plugins": "List of zsh plugins to include",
        "themes": "List of zsh themes to include",
        "options": "Dictionary of zsh options",
        "aliases": "Dictionary of zsh aliases",
        "functions": "Dictionary of zsh functions",
        "env_vars": "Dictionary of environment variables",
        "completion_settings": "Dictionary of completion settings",
        "extensions": "List of extension points from other modules",
    },
)

def _zsh_config_impl(ctx):
    """Implementation for zsh_config rule."""
    config_files = {}
    output_files = []
    
    # Build the configuration content
    zshrc_content = []
    zshrc_content.append("# Generated by Bazel - do not edit directly")
    zshrc_content.append("")
    
    # Add options
    if ctx.attr.options:
        zshrc_content.append("# Options")
        for option, value in ctx.attr.options.items():
            if value == "on" or value == "true":
                zshrc_content.append("setopt %s" % option)
            elif value == "off" or value == "false":
                zshrc_content.append("unsetopt %s" % option)
        zshrc_content.append("")
    
    # Add environment variables
    if ctx.attr.env_vars:
        zshrc_content.append("# Environment variables")
        for var, value in ctx.attr.env_vars.items():
            zshrc_content.append('export %s="%s"' % (var, value))
        zshrc_content.append("")
    
    # Add aliases
    if ctx.attr.aliases:
        zshrc_content.append("# Aliases")
        for alias, command in ctx.attr.aliases.items():
            zshrc_content.append('alias %s="%s"' % (alias, command))
        zshrc_content.append("")
    
    # Add functions
    if ctx.attr.functions:
        zshrc_content.append("# Functions")
        for func_name, func_body in ctx.attr.functions.items():
            zshrc_content.append('%s() {' % func_name)
            for line in func_body.split("\n"):
                zshrc_content.append('  %s' % line)
            zshrc_content.append('}')
            zshrc_content.append("")
    
    # Add plugins
    if ctx.attr.plugins:
        zshrc_content.append("# Plugins")
        zshrc_content.append("# This is a placeholder for plugin loading logic")
        for plugin in ctx.attr.plugins:
            zshrc_content.append("# Load plugin: %s" % plugin)
        zshrc_content.append("")
    
    # Add themes
    if ctx.attr.themes:
        zshrc_content.append("# Themes")
        zshrc_content.append("# This is a placeholder for theme loading logic")
        for theme in ctx.attr.themes:
            zshrc_content.append("# Load theme: %s" % theme)
        zshrc_content.append("")
    
    # Add completion settings
    if ctx.attr.completion_settings:
        zshrc_content.append("# Completion settings")
        zshrc_content.append("autoload -Uz compinit")
        zshrc_content.append("compinit")
        for setting, value in ctx.attr.completion_settings.items():
            zshrc_content.append("# Setting: %s = %s" % (setting, value))
        zshrc_content.append("")
    
    # Add extension points
    if ctx.attr.extensions:
        zshrc_content.append("# Extensions from other modules")
        for ext in ctx.attr.extensions:
            zshrc_content.append("# Extension: %s" % ext)
        zshrc_content.append("")

    # Support for local customizations
    zshrc_content.append("# Load local customizations if present")
    zshrc_content.append('[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local')
    
    # Create output file for .zshrc
    zshrc_file = ctx.actions.declare_file(ctx.label.name + ".zshrc")
    ctx.actions.write(zshrc_file, "\n".join(zshrc_content))
    config_files[".zshrc"] = zshrc_file
    output_files.append(zshrc_file)
    
    # Create output file for .zshenv if needed
    if ctx.attr.env_vars:
        zshenv_content = []
        zshenv_content.append("# Generated by Bazel - do not edit directly")
        zshenv_content.append("")
        zshenv_content.append("# Environment variables")
        for var, value in ctx.attr.env_vars.items():
            zshenv_content.append('export %s="%s"' % (var, value))
        zshenv_content.append("")
        zshenv_content.append("# Load local environment customizations if present")
        zshenv_content.append('[[ -f ~/.zshenv.local ]] && source ~/.zshenv.local')
        
        zshenv_file = ctx.actions.declare_file(ctx.label.name + ".zshenv")
        ctx.actions.write(zshenv_file, "\n".join(zshenv_content))
        config_files[".zshenv"] = zshenv_file
        output_files.append(zshenv_file)
    
    return [
        ZshConfigInfo(
            config_files = config_files,
            plugins = ctx.attr.plugins,
            themes = ctx.attr.themes,
            options = ctx.attr.options,
            aliases = ctx.attr.aliases,
            functions = ctx.attr.functions,
            env_vars = ctx.attr.env_vars,
            completion_settings = ctx.attr.completion_settings,
            extensions = ctx.attr.extensions,
        ),
        DefaultInfo(files = depset(output_files)),
    ]

zsh_config = rule(
    implementation = _zsh_config_impl,
    attrs = {
        "plugins": attr.string_list(
            doc = "List of zsh plugins to include",
            default = [],
        ),
        "themes": attr.string_list(
            doc = "List of zsh themes to include",
            default = [],
        ),
        "options": attr.string_dict(
            doc = "Dictionary of zsh options with values 'on'/'off' or 'true'/'false'",
            default = {},
        ),
        "aliases": attr.string_dict(
            doc = "Dictionary of zsh aliases",
            default = {},
        ),
        "functions": attr.string_dict(
            doc = "Dictionary of zsh functions, mapping function name to function body",
            default = {},
        ),
        "env_vars": attr.string_dict(
            doc = "Dictionary of environment variables",
            default = {},
        ),
        "completion_settings": attr.string_dict(
            doc = "Dictionary of completion settings",
            default = {},
        ),
        "extensions": attr.string_list(
            doc = "List of extension points from other modules",
            default = [],
        ),
    },
)

def _zsh_merge_impl(ctx):
    """Implementation for zsh_merge rule to combine multiple zsh_config targets."""
    merged_config_files = {}
    all_plugins = []
    all_themes = []
    all_options = {}
    all_aliases = {}
    all_functions = {}
    all_env_vars = {}
    all_completion_settings = {}
    all_extensions = []
    output_files = []
    
    # Merge configurations
    for config in ctx.attr.configs:
        config_info = config[ZshConfigInfo]
        
        # Merge plugins and themes (unique values)
        for plugin in config_info.plugins:
            if plugin not in all_plugins:
                all_plugins.append(plugin)
        
        for theme in config_info.themes:
            if theme not in all_themes:
                all_themes.append(theme)
        
        # Merge dictionaries (later configs override earlier ones)
        all_options.update(config_info.options)
        all_aliases.update(config_info.aliases)
        all_functions.update(config_info.functions)
        all_env_vars.update(config_info.env_vars)
        all_completion_settings.update(config_info.completion_settings)
        
        # Merge extensions
        for ext in config_info.extensions:
            if ext not in all_extensions:
                all_extensions.append(ext)
    
    # Generate merged .zshrc
    zshrc_content = []
    zshrc_content.append("# Generated by Bazel - do not edit directly")
    zshrc_content.append("# This is a merged configuration from multiple sources")
    zshrc_content.append("")
    
    # Add options
    if all_options:
        zshrc_content.append("# Options")
        for option, value in all_options.items():
            if value == "on" or value == "true":
                zshrc_content.append("setopt %s" % option)
            elif value == "off" or value == "false":
                zshrc_content.append("unsetopt %s" % option)
        zshrc_content.append("")
    
    # Add environment variables
    if all_env_vars:
        zshrc_content.append("# Environment variables")
        for var, value in all_env_vars.items():
            zshrc_content.append('export %s="%s"' % (var, value))
        zshrc_content.append("")
    
    # Add aliases
    if all_aliases:
        zshrc_content.append("# Aliases")
        for alias, command in all_aliases.items():
            zshrc_content.append('alias %s="%s"' % (alias, command))
        zshrc_content.append("")
    
    # Add functions
    if all_functions:
        zshrc_content.append("# Functions")
        for func_name, func_body in all_functions.items():
            zshrc_content.append('%s() {' % func_name)
            for line in func_body.split("\n"):
                zshrc_content.append('  %s' % line)
            zshrc_content.append('}')
            zshrc_content.append("")
    
    # Add plugins
    if all_plugins:
        zshrc_content.append("# Plugins")
        zshrc_content.append("# This is a placeholder for plugin loading logic")
        for plugin in all_plugins:
            zshrc_content.append("# Load plugin: %s" % plugin)
        zshrc_content.append("")
    
    # Add themes
    if all_themes:
        zshrc_content.append("# Themes")
        zshrc_content.append("# This is a placeholder for theme loading logic")
        for theme in all_themes:
            zshrc_content.append("# Load theme: %s" % theme)
        zshrc_content.append("")
    
    # Add completion settings
    if all_completion_settings:
        zshrc_content.append("# Completion settings")
        zshrc_content.append("autoload -Uz compinit")
        zshrc_content.append("compinit")
        for setting, value in all_completion_settings.items():
            zshrc_content.append("# Setting: %s = %s" % (setting, value))
        zshrc_content.append("")
    
    # Add extension points
    if all_extensions:
        zshrc_content.append("# Extensions from other modules")
        for ext in all_extensions:
            zshrc_content.append("# Extension: %s" % ext)
        zshrc_content.append("")
    
    # Support for local customizations
    zshrc_content.append("# Load local customizations if present")
    zshrc_content.append('[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local')
    
    # Create output file for .zshrc
    zshrc_file = ctx.actions.declare_file(ctx.label.name + ".zshrc")
    ctx.actions.write(zshrc_file, "\n".join(zshrc_content))
    merged_config_files[".zshrc"] = zshrc_file
    output_files.append(zshrc_file)
    
    # Create output file for .zshenv if needed
    if all_env_vars:
        zshenv_content = []
        zshenv_content.append("# Generated by Bazel - do not edit directly")
        zshenv_content.append("# This is a merged configuration from multiple sources")
        zshenv_content.append("")
        zshenv_content.append("# Environment variables")
        for var, value in all_env_vars.items():
            zshenv_content.append('export %s="%s"' % (var, value))
        zshenv_content.append("")
        zshenv_content.append("# Load local environment customizations if present")
        zshenv_content.append('[[ -f ~/.zshenv.local ]] && source ~/.zshenv.local')
        
        zshenv_file = ctx.actions.declare_file(ctx.label.name + ".zshenv")
        ctx.actions.write(zshenv_file, "\n".join(zshenv_content))
        merged_config_files[".zshenv"] = zshenv_file
        output_files.append(zshenv_file)
    
    return [
        ZshConfigInfo(
            config_files = merged_config_files,
            plugins = all_plugins,
            themes = all_themes,
            options = all_options,
            aliases = all_aliases,
            functions = all_functions,
            env_vars = all_env_vars,
            completion_settings = all_completion_settings,
            extensions = all_extensions,
        ),
        DefaultInfo(files = depset(output_files)),
    ]

zsh_merge = rule(
    implementation = _zsh_merge_impl,
    attrs = {
        "configs": attr.label_list(
            doc = "List of zsh_config targets to merge",
            providers = [ZshConfigInfo],
            mandatory = True,
        ),
    },
)

def _zsh_extension_impl(ctx):
    """Implementation for zsh_extension rule to add extensions from other modules."""
    extension_info = {
        "name": ctx.attr.name,
        "type": ctx.attr.type,
        "source": ctx.attr.source,
    }
    
    # Create descriptor file
    descriptor = ctx.actions.declare_file(ctx.label.name + ".ext")
    descriptor_content = [
        "name: %s" % ctx.attr.name,
        "type: %s" % ctx.attr.type,
        "source: %s" % ctx.attr.source,
    ]
    
    if ctx.attr.aliases:
        descriptor_content.append("aliases:")
        for alias, command in ctx.attr.aliases.items():
            descriptor_content.append('  %s: "%s"' % (alias, command))
    
    if ctx.attr.functions:
        descriptor_content.append("functions:")
        for func_name, func_body in ctx.attr.functions.items():
            descriptor_content.append("  %s: |" % func_name)
            for line in func_body.split("\n"):
                descriptor_content.append("    %s" % line)
    
    if ctx.attr.env_vars:
        descriptor_content.append("env_vars:")
        for var, value in ctx.attr.env_vars.items():
            descriptor_content.append('  %s: "%s"' % (var, value))
    
    ctx.actions.write(descriptor, "\n".join(descriptor_content))
    
    # Create ZshConfigInfo with the extension info
    extensions = [ctx.attr.name]
    aliases = ctx.attr.aliases
    functions = ctx.attr.functions
    env_vars = ctx.attr.env_vars
    
    return [
        ZshConfigInfo(
            config_files = {},
            plugins = [],
            themes = [],
            options = {},
            aliases = aliases,
            functions = functions,
            env_vars = env_vars,
            completion_settings = {},
            extensions = extensions,
        ),
        DefaultInfo(files = depset([descriptor])),
    ]

zsh_extension = rule(
    implementation = _zsh_extension_impl,
    attrs = {
        "type": attr.string(
            doc = "Type of extension (e.g., 'git', 'tmux', 'vim')",
            mandatory = True,
        ),
        "source": attr.string(
            doc = "Source module providing the extension",
            mandatory = True,
        ),
        "aliases": attr.string_dict(
            doc = "Dictionary of zsh aliases provided by this extension",
            default = {},
        ),
        "functions": attr.string_dict(
            doc = "Dictionary of zsh functions provided by this extension",
            default = {},
        ),
        "env_vars": attr.string_dict(
            doc = "Dictionary of environment variables provided by this extension",
            default = {},
        ),
    },
)