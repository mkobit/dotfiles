load("//modules/rules:simpledotfile.bzl", "simple_dotfile", "simple_dotfile_group")

package(default_visibility = ["//visibility:public"])

# System integration test for jq 
genrule(
    name = "system_integration_test",
    outs = ["system_integration_test.sh"],
    cmd = """
        echo '#!/bin/bash' > $@
        echo 'echo "Testing jq installation..."' >> $@
        echo 'if ! command -v jq &> /dev/null; then' >> $@
        echo '    echo "jq not found"' >> $@
        echo '    exit 1' >> $@
        echo 'fi' >> $@
        echo 'echo "jq version: $$(jq --version)"' >> $@
        echo 'echo "Basic test: $$(echo "{}" | jq .)"' >> $@
        echo 'echo "Test passed!"' >> $@
        chmod +x $@
    """,
    executable = True,
)

# Base jq module with utility functions
genrule(
    name = "base",
    outs = ["base.jq"],
    cmd = """
echo '# Base utility functions for jq' > $@
echo '# Generated by Bazel' >> $@
echo '' >> $@
echo 'def is_string: type == "string";' >> $@
echo 'def is_number: type == "number";' >> $@
echo 'def is_object: type == "object";' >> $@
echo 'def is_array: type == "array";' >> $@
echo 'def is_null: type == "null";' >> $@
echo 'def is_boolean: type == "boolean";' >> $@
echo '' >> $@
echo '# Object utilities' >> $@
echo 'def keys_sorted: keys | sort;' >> $@
echo 'def has_key(k): k as $$k | has($$k);' >> $@
echo 'def merge_objects(o): reduce o as $$item ({}; . + $$item);' >> $@
echo '' >> $@
echo '# Array utilities' >> $@
echo 'def unique_sorted: unique | sort;' >> $@
echo 'def concat_arrays: reduce .[] as $$item ([]; . + $$item);' >> $@
echo 'def avg: add / length;' >> $@
echo 'def sum_by(f): map(f) | add;' >> $@
echo 'def group_by_to_map(f): group_by(f) | map({(.[0] | f): .}) | add;' >> $@
""",
)

# JSON formatting module
genrule(
    name = "formatting", 
    outs = ["formatting.jq"],
    cmd = """
echo '# JSON formatting utilities' > $@
echo '# Generated by Bazel' >> $@
echo '' >> $@
echo 'import "base" as base;' >> $@
echo '' >> $@
echo '# Pretty printing with customizable indentation' >> $@
echo 'def pretty_print(indent):' >> $@
echo '    . as $$root |' >> $@
echo '    [paths(scalars) as $$path | {' >> $@
echo '        path: $$path | join("."),' >> $@
echo '        value: getpath($$path)' >> $@
echo '    }] |' >> $@
echo '    if indent == null then . else .[] | "\\\\(" + indent * (.path | length) + .path + ": " + .value) end;' >> $@
echo '' >> $@
echo '# Format dates to ISO 8601' >> $@
echo 'def format_date: strftime("%Y-%m-%dT%H:%M:%SZ");' >> $@
echo '' >> $@
echo '# Convert objects to CSV format' >> $@
echo 'def to_csv:' >> $@
echo '    if base::is_array and (.[0] | base::is_object) then' >> $@
echo '        # Get all possible keys across all objects' >> $@
echo '        (map(keys) | add | unique) as $$cols |' >> $@
echo '        # Output the header row' >> $@
echo '        [$$cols] +' >> $@
echo '        # Output data rows' >> $@
echo '        map(. as $$row | $$cols | map($$row[.])) |' >> $@
echo '        map(map(tostring) | join(",")) |' >> $@
echo '        join("\\\\n")' >> $@
echo '    else "Error: Input must be an array of objects" end;' >> $@
""",
)

# Simple modules
genrule(
    name = "utils",
    outs = ["utils.jq"],
    cmd = """
echo '# Utility functions for jq' > $@
echo '# Generated by Bazel' >> $@
echo '' >> $@
echo '# String utilities' >> $@
echo 'def trim: gsub("^\\\\s+|\\\\s+$$"; "");' >> $@
echo 'def to_upper: ascii_upcase;' >> $@
echo 'def to_lower: ascii_downcase;' >> $@
""",
)

genrule(
    name = "advanced",
    srcs = [":utils"],
    outs = ["advanced.jq"],
    cmd = """
echo '# Advanced functions for jq' > $@
echo '# Generated by Bazel' >> $@
echo '' >> $@
echo 'import "utils" as utils;' >> $@
echo '' >> $@
echo '# Statistical functions' >> $@
echo 'def stats:' >> $@
echo '  {' >> $@
echo '    sum: add,' >> $@
echo '    mean: add / length,' >> $@
echo '    median: sort | if length % 2 == 0 then' >> $@
echo '                    .[length/2 - 1, length/2] | add / 2' >> $@
echo '                  else' >> $@
echo '                    .[length/2 | floor]' >> $@
echo '                  end,' >> $@
echo '    count: length,' >> $@
echo '    min: min,' >> $@
echo '    max: max' >> $@
echo '  };' >> $@
""",
)

filegroup(
    name = "jq_modules",
    srcs = [
        ":base",
        ":formatting", 
        ":utils",
        ":advanced",
    ],
)

# Simple dotfiles for jq modules
simple_dotfile(
    name = "jq_base_dotfile",
    src = ":base",
    dest = "~/.jq/base.jq",
)

simple_dotfile(
    name = "jq_formatting_dotfile",
    src = ":formatting",
    dest = "~/.jq/formatting.jq",
)

simple_dotfile(
    name = "jq_utils_dotfile",
    src = ":utils",
    dest = "~/.jq/utils.jq", 
)

simple_dotfile(
    name = "jq_advanced_dotfile",
    src = ":advanced",
    dest = "~/.jq/advanced.jq",
)

# Group all jq dotfiles
simple_dotfile_group(
    name = "jq_dotfiles",
    deps = [
        ":jq_base_dotfile",
        ":jq_formatting_dotfile", 
        ":jq_utils_dotfile",
        ":jq_advanced_dotfile",
    ],
)

# Print modules path
genrule(
    name = "print_modules_path",
    srcs = [":jq_modules"],
    outs = ["jq_modules_path.txt"],
    cmd = """
echo 'To use these jq modules, add the following paths to your jq search path:' > $@
echo '' >> $@
echo '  -L ~/.jq' >> $@
echo '' >> $@
echo 'For example, to use the base module:' >> $@
echo 'jq -L ~/.jq -n "import \\"base\\" as b; [1,2,3] | b::avg"' >> $@
echo '' >> $@
""",
)