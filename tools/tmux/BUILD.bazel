# Tmux configuration
# Uses static files for different tmux versions

load("//modules/rules:dotfile.bzl", "dotfile", "dotfile_group")
load("//modules/toolchains:tmux_toolchain.bzl", "tmux_test", "tmux_toolchain")

package(default_visibility = ["//visibility:public"])

# Select the right configuration at build time
genrule(
    name = "tmux_conf_generated",
    srcs = [
        "configs/tmux_base.conf",
        "configs/tmux_3_0.conf", 
        "configs/tmux_3_2.conf",
    ],
    outs = ["tmux.conf"],
    cmd = """
#!/bin/bash
# Script to detect tmux version and select appropriate config

# Detect tmux version
if command -v tmux &>/dev/null; then
    version_output=$$(tmux -V 2>&1)
    version=$$(echo "$$version_output" | grep -o "tmux [0-9]\\\\+\\\\.[0-9]\\\\+" | sed "s/tmux //")
    
    echo "# Detected tmux version: $$version" > $@
    
    # Parse version
    if [[ "$$version" =~ ^([0-9]+)\\\\.[0-9]+ ]]; then
        major=$${BASH_REMATCH[1]}
        minor=$$(echo "$$version" | cut -d. -f2)
        
        # Select configuration based on version
        if [[ $$major -gt 3 || ($$major -eq 3 && $$minor -ge 2) ]]; then
            echo "# Using tmux 3.2+ configuration" >> $@
            cat $(location configs/tmux_3_2.conf) >> $@
        elif [[ $$major -gt 3 || ($$major -eq 3 && $$minor -ge 0) ]]; then
            echo "# Using tmux 3.0+ configuration" >> $@
            cat $(location configs/tmux_3_0.conf) >> $@
        else
            echo "# Using base tmux configuration (version < 3.0)" >> $@
            cat $(location configs/tmux_base.conf) >> $@
        fi
    else
        echo "# Could not parse tmux version, using base configuration" >> $@
        cat $(location configs/tmux_base.conf) >> $@
    fi
else
    echo "# tmux not installed, using base configuration" > $@
    cat $(location configs/tmux_base.conf) >> $@
fi

echo "# Generated at $$(date)" >> $@
    """,
)

# Create the dotfile rule for tmux
dotfile(
    name = "tmux_conf_dotfile",
    src = ":tmux_conf_generated",
    dest = "~/.tmux.conf",
)

# Group all tmux dotfiles
dotfile_group(
    name = "tmux_dotfiles",
    deps = [
        ":tmux_conf_dotfile",
    ],
)

# Test target to show detected tmux version
genrule(
    name = "show_tmux_version",
    srcs = [],
    outs = ["tmux_version_info.txt"],
    cmd = """
    if command -v tmux &>/dev/null; then
        version_output=$$(tmux -V 2>&1)
        version=$$(echo "$$version_output" | grep -o "tmux [0-9]\\\\+\\\\.[0-9]\\\\+" | sed "s/tmux //")
        echo "Detected tmux version: $$version" > $@
    else
        echo "tmux not installed" > $@
    fi
    """,
)

# macOS specific configuration
genrule(
    name = "tmux_conf_macos",
    srcs = [
        "configs/macos_specific.tmux",
        "//modules/tmux:tmux.conf.template",
    ],
    outs = ["tmux_macos.conf"],
    cmd = """
#!/bin/bash
cat $(location //modules/tmux:tmux.conf.template) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# macOS-specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/macos_specific.tmux) >> $@
echo "# Generated at $$(date) for macOS" >> $@
    """,
)

# Linux specific configuration
genrule(
    name = "tmux_conf_linux",
    srcs = [
        "configs/linux_specific.tmux",
        "//modules/tmux:tmux.conf.template",
    ],
    outs = ["tmux_linux.conf"],
    cmd = """
#!/bin/bash
cat $(location //modules/tmux:tmux.conf.template) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# Linux-specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/linux_specific.tmux) >> $@
echo "# Generated at $$(date) for Linux" >> $@
    """,
)

# WSL specific configuration
genrule(
    name = "tmux_conf_wsl",
    srcs = [
        "configs/wsl_specific.tmux",
        "//modules/tmux:tmux.conf.template",
    ],
    outs = ["tmux_wsl.conf"],
    cmd = """
#!/bin/bash
cat $(location //modules/tmux:tmux.conf.template) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# WSL-specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/wsl_specific.tmux) >> $@
echo "# Generated at $$(date) for WSL" >> $@
    """,
)

# Windows specific configuration
genrule(
    name = "tmux_conf_windows",
    srcs = [
        "configs/windows_specific.tmux",
        "//modules/tmux:tmux.conf.template",
    ],
    outs = ["tmux_windows.conf"],
    cmd = """
#!/bin/bash
cat $(location //modules/tmux:tmux.conf.template) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# Windows-specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/windows_specific.tmux) >> $@
echo "# Generated at $$(date) for Windows" >> $@
    """,
)

# Generic fallback configuration
genrule(
    name = "tmux_conf_generic",
    srcs = [
        "configs/generic.tmux",
        "//modules/tmux:tmux.conf.template",
    ],
    outs = ["tmux_generic.conf"],
    cmd = """
#!/bin/bash
cat $(location //modules/tmux:tmux.conf.template) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# Generic platform configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/generic.tmux) >> $@
echo "# Generated at $$(date) for generic platform" >> $@
    """,
)

# Combined tmux configuration - using select() for different platforms
alias(
    name = "tmux_conf_combined",
    actual = select({
        "//selectors:macos": ":tmux_conf_macos",
        "//selectors:linux": ":tmux_conf_linux",
        "//selectors:windows": ":tmux_conf_windows",
        "//selectors:wsl": ":tmux_conf_wsl",
        "//conditions:default": ":tmux_conf_generic",
    }),
)

# Create a combined tmux configuration that includes version-based configs too
genrule(
    name = "tmux_conf_unified",
    srcs = [
        ":tmux_conf_combined",
        ":tmux_conf_generated",
    ],
    outs = ["tmux_unified.conf"],
    cmd = """
#!/bin/bash
# Create a fully unified tmux configuration
echo "# ===================================================" > $@
echo "# Unified tmux configuration with platform and version detection" >> $@
echo "# ===================================================" >> $@
echo "" >> $@
echo "# Platform-specific configuration" >> $@
cat $(location :tmux_conf_combined) >> $@
echo "" >> $@
echo "# ===================================================" >> $@
echo "# Version-specific configurations" >> $@
echo "# ===================================================" >> $@
echo "# These settings would normally be detected at runtime" >> $@
echo "# They are included here as reference only" >> $@
grep -v "^# Generated at" $(location :tmux_conf_generated) >> $@
echo "" >> $@
echo "# Generated at $$(date)" >> $@
echo "# Platform: $$(uname -s)" >> $@
    """,
)

# Dotfile rule for the combined configuration
dotfile(
    name = "tmux_conf_combined_dotfile",
    src = ":tmux_conf_combined",
    dest = "~/.tmux.conf.combined",
)

# Dotfile rule for the unified configuration
dotfile(
    name = "tmux_conf_unified_dotfile",
    src = ":tmux_conf_unified",
    dest = "~/.tmux.conf.unified",
)

# Work variant combined configuration
genrule(
    name = "tmux_conf_combined_work",
    srcs = [
        ":tmux_conf_combined",
        "configs/work_variant.tmux",
    ],
    outs = ["tmux_combined_work.conf"],
    cmd = """
#!/bin/bash
# Generate work variant combined configuration
cat $(location :tmux_conf_combined) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# Work variant specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/work_variant.tmux) >> $@
echo "" >> $@
echo "# Generated for work variant at $$(date)" >> $@
    """,
)

# Dotfile rule for work variant combined configuration
dotfile(
    name = "tmux_conf_combined_work_dotfile",
    src = ":tmux_conf_combined_work",
    dest = "~/.tmux.conf.work",
)

# Personal variant combined configuration
genrule(
    name = "tmux_conf_combined_personal",
    srcs = [
        ":tmux_conf_combined",
        "configs/personal_variant.tmux",
    ],
    outs = ["tmux_combined_personal.conf"],
    cmd = """
#!/bin/bash
# Generate personal variant combined configuration
cat $(location :tmux_conf_combined) > $@
echo "" >> $@
echo "# =============================================" >> $@
echo "# Personal variant specific configuration" >> $@
echo "# =============================================" >> $@
cat $(location configs/personal_variant.tmux) >> $@
echo "" >> $@
echo "# Generated for personal variant at $$(date)" >> $@
    """,
)

# Dotfile rule for personal variant combined configuration
dotfile(
    name = "tmux_conf_combined_personal_dotfile",
    src = ":tmux_conf_combined_personal",
    dest = "~/.tmux.conf.personal",
)

# Group for all combined tmux configurations
dotfile_group(
    name = "tmux_combined_dotfiles",
    deps = [
        ":tmux_conf_combined_dotfile",
        ":tmux_conf_combined_work_dotfile",
        ":tmux_conf_combined_personal_dotfile",
        ":tmux_conf_unified_dotfile",
    ],
)

# Create the tmux toolchain instance
tmux_toolchain(
    name = "tmux_toolchain_target",
)

# Simple system integration test for tmux using the tmux_test rule
tmux_test(
    name = "system_integration_test",
    tags = ["manual"], # Don't run automatically in CI
)

# Test target to validate combined config
genrule(
    name = "validate_combined_config",
    srcs = [":tmux_conf_combined"],
    outs = ["combined_config_validation.txt"],
    cmd = """
#!/bin/bash
# Validate that the combined config can be loaded by tmux

if command -v tmux &>/dev/null; then
    # Create a temporary file with the combined config
    TMP_CONF=$$(mktemp)
    cat $(location :tmux_conf_combined) > "$$TMP_CONF"
    
    # Try to load the config in tmux
    if tmux -f "$$TMP_CONF" start-server \\\\; show-option -g default-terminal > /dev/null 2>&1; then
        echo "VALIDATION PASSED: Combined tmux config is valid" > $@
        tmux -f "$$TMP_CONF" start-server \\\\; show-option -g | head -10 >> $@
    else
        echo "VALIDATION FAILED: Combined tmux config has errors" > $@
        tmux -f "$$TMP_CONF" start-server \\\\; show-option -g 2>&1 | head -10 >> $@
    fi
    
    # Clean up
    rm -f "$$TMP_CONF"
else
    echo "VALIDATION SKIPPED: tmux not installed" > $@
fi
    """,
    tags = ["manual"],  # Don't run automatically in CI
)

# Target to print all available tmux configurations
genrule(
    name = "print_all_configs",
    srcs = [":list_configs"],
    outs = ["_print_all_configs.sh"],
    cmd = "echo '#!/bin/bash' > $@ && " +
          "echo 'cat $(location :list_configs)' >> $@ && " +
          "chmod +x $@",
    executable = True,
)

# Generate a list of all available tmux configurations
genrule(
    name = "list_configs",
    srcs = [
        ":tmux_conf_generated",
        ":tmux_conf_macos",
        ":tmux_conf_linux",
        ":tmux_conf_windows",
        ":tmux_conf_wsl",
        ":tmux_conf_generic",
        ":tmux_conf_unified",
        ":tmux_conf_combined_work",
        ":tmux_conf_combined_personal",
    ],
    outs = ["available_tmux_configs.txt"],
    cmd = """
echo "============================================================" > $@
echo "Available tmux configurations (generated by Bazel)" >> $@
echo "============================================================" >> $@
echo "" >> $@

# Show install paths for each configuration
echo "Base (version-specific) configuration:" >> $@
echo "  $(location :tmux_conf_generated)" >> $@
echo "  Install with: bazel run //modules/tmux:print_path" >> $@
echo "" >> $@

echo "Platform-specific configurations:" >> $@
echo "  macOS: $(location :tmux_conf_macos)" >> $@
echo "  Linux: $(location :tmux_conf_linux)" >> $@
echo "  Windows: $(location :tmux_conf_windows)" >> $@
echo "  WSL: $(location :tmux_conf_wsl)" >> $@
echo "  Generic: $(location :tmux_conf_generic)" >> $@
echo "" >> $@

echo "Unified configuration (platform + version detection):" >> $@
echo "  $(location :tmux_conf_unified)" >> $@
echo "  Install with: bazel run //modules/tmux:print_unified_path" >> $@
echo "" >> $@

echo "Variant configurations:" >> $@
echo "  Work: $(location :tmux_conf_combined_work)" >> $@
echo "  Personal: $(location :tmux_conf_combined_personal)" >> $@
echo "" >> $@

echo "============================================================" >> $@
echo "To install all tmux configuration dotfiles:" >> $@
echo "bazel run //tools/tmux:tmux_combined_dotfiles" >> $@
echo "============================================================" >> $@
echo "" >> $@
echo "Generated: $$(date)" >> $@
    """,
    visibility = ["//visibility:public"],
)