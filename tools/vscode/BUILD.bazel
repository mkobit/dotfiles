load("//modules/vscode:vscode_rules.bzl", "vscode_config", "vscode_detect")
load("//tools:defs.bzl", "template_file")

package(default_visibility = ["//visibility:public"])

# Base VSCode configuration files
filegroup(
    name = "vscode_configs",
    srcs = glob(["configs/*.json"]),
)

# Generate the VSCode configuration
template_file(
    name = "vscode_conf_generated",
    src = "settings.json.tpl",
    out = "settings.json",
    data = [
        ":vscode_configs",
    ],
)

# Create a configuration for standard user settings
vscode_config(
    name = "vscode_user_settings",
    src = ":vscode_conf_generated",
    dest = "~/.vscode/settings.json",
)

# Create a workspace-specific configuration
vscode_config(
    name = "vscode_workspace_settings",
    src = ":vscode_conf_generated",
    dest = ".vscode/settings.json",
    is_workspace = True,
)

# Detection tool for VSCode
vscode_detect(
    name = "detect",
)

# Platform-specific VSCode configurations
template_file(
    name = "vscode_macos_conf",
    src = "settings.json.tpl",
    out = "macos_settings.json",
    substitutions = {
        "%%PLATFORM%%": "macos",
    },
    data = [
        ":vscode_configs",
        "configs/macos_specific.json",
    ],
)

template_file(
    name = "vscode_linux_conf",
    src = "settings.json.tpl",
    out = "linux_settings.json",
    substitutions = {
        "%%PLATFORM%%": "linux",
    },
    data = [
        ":vscode_configs",
        "configs/linux_specific.json",
    ],
)

template_file(
    name = "vscode_windows_conf",
    src = "settings.json.tpl",
    out = "windows_settings.json",
    substitutions = {
        "%%PLATFORM%%": "windows",
    },
    data = [
        ":vscode_configs",
        "configs/windows_specific.json",
    ],
)

# Platform-specific VSCode configurations using select()
filegroup(
    name = "vscode_platform_specific",
    srcs = select({
        "//selectors:macos": [":vscode_macos_conf"],
        "//selectors:linux": [":vscode_linux_conf"],
        "//selectors:windows": [":vscode_windows_conf"],
        "//conditions:default": [":vscode_conf_generated"],
    }),
)

# Create platform-specific user settings
vscode_config(
    name = "vscode_platform_settings",
    src = select({
        "//selectors:macos": ":vscode_macos_conf",
        "//selectors:linux": ":vscode_linux_conf",
        "//selectors:windows": ":vscode_windows_conf",
        "//conditions:default": ":vscode_conf_generated",
    }),
    dest = "~/.vscode/settings.json",
)

# Conditional configuration based on VSCode detection
filegroup(
    name = "vscode_detected_configs",
    srcs = select({
        "//selectors:has_vscode": [
            ":vscode_platform_settings",
        ],
        "//conditions:default": [],
    }),
)

# Generate info about the detection process
genrule(
    name = "detection_info",
    outs = ["detection_info.txt"],
    cmd = "echo 'VSCode Detection' > $@ && " +
          "echo '================' >> $@ && " +
          "echo '' >> $@ && " +
          "echo 'Run the detection with: bazel run //tools/vscode:detect' >> $@ && " +
          "echo '' >> $@ && " +
          "echo 'This will:' >> $@ && " +
          "echo '  1. Check if VSCode is installed' >> $@ && " +
          "echo '  2. Update .bazelrc.local with the appropriate settings' >> $@ && " +
          "echo '  3. Output a JSON file with detection details' >> $@ && " +
          "echo '' >> $@ && " +
          "echo 'To use VSCode-specific configurations, run:' >> $@ && " +
          "echo '  bazel run //tools/vscode:vscode_platform_settings' >> $@",
)

# Filegroup for all VSCode related targets
filegroup(
    name = "vscode_all",
    srcs = [
        ":detection_info",
        ":vscode_platform_settings",
        ":vscode_user_settings",
        ":vscode_workspace_settings",
    ],
)