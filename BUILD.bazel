load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@pypi//:requirements.bzl", "all_whl_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("//tools:linting.bzl", "bazel_files_format", "bazel_files_format_test")
load("//tools:lsp_simple.bzl", "setup_simple_lsp")

package(default_visibility = ["//visibility:public"])

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.lock.txt",
)

# Format all Bazel files in the repository
bazel_files_format(name = "format")

# Test that all Bazel files are properly formatted
bazel_files_format_test(
    name = "format_test",
)

# Set up simplified LSP configuration for the project
setup_simple_lsp(
    name = "lsp_setup",
)

# Test suite for validation
test_suite(
    name = "validation_tests",
    tests = [
        ":format_test",
        "//.agents/claude:claude_settings_schema_test",
    ],
)

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "pypi",
    requirements = "//:requirements.lock.txt",
)

gazelle_binary(
    name = "gazelle_multilang",
    languages = [
        "@rules_python_gazelle_plugin//python",
    ],
)

gazelle(
    name = "gazelle",
    gazelle = ":gazelle_multilang",
)
