"""
Implementation of Vim configuration rules.
"""

load("//rules/common:rule_utils_py.bzl", "create_config_rule_py")

# Create vim_config rule using Python-based utilities
vim_config = create_config_rule_py(
    rule_name = "vim",
    file_extension = ".vim",
    mnemonic = "VimConfig",
    comment_char = "\"",
    allowed_extensions = [".vim"],
    header_template = "\" Vim configuration generated by Bazel",
    footer_template = "\" End of generated Vim configuration",
)

# Simple test rule for Vim (no toolchain required)
def _vim_test_impl(ctx):
    """Implementation of vim_test rule."""
    config = ctx.file.config
    test_script = ctx.actions.declare_file(ctx.label.name + ".sh")

    ctx.actions.write(
        output = test_script,
        content = """#!/bin/bash
set -euo pipefail

# Try to find vim in the system
if command -v vim >/dev/null 2>&1; then
    echo "Testing Vim configuration with vim"
    vim -u NONE -N --cmd "source {config}" --cmd "quit" || {{
        echo "Vim configuration has syntax errors"
        exit 1
    }}
elif command -v vi >/dev/null 2>&1; then
    echo "Testing Vim configuration with vi"
    vi -c "source {config}" -c "quit" || {{
        echo "Vim configuration has syntax errors"  
        exit 1
    }}
else
    echo "WARNING: No vim executable found - test will be skipped"
    echo "Vim configuration test skipped - no vim found"
fi

echo "Vim configuration syntax is valid!"
exit 0
""".format(config = config.short_path),
        is_executable = True,
    )

    return [DefaultInfo(
        executable = test_script,
        runfiles = ctx.runfiles(files = [config]),
    )]

vim_test = rule(
    implementation = _vim_test_impl,
    attrs = {
        "config": attr.label(
            doc = "The Vim configuration file to test",
            allow_single_file = [".vim"],
            mandatory = True,
        ),
    },
    test = True,
)
