"""
Implementation of Hammerspoon configuration rules.
"""

load("//rules/common:rule_utils.bzl", "create_config_rule")

# Create hammerspoon_config rule using common utilities
hammerspoon_config = create_config_rule(
    rule_name = "hammerspoon",
    file_extension = ".lua",
    mnemonic = "HammerspoonConfig",
    allowed_extensions = [".lua"],
    header_template = "-- Hammerspoon configuration generated by Bazel",
    footer_template = "-- End of generated Hammerspoon configuration",
)

# Simple test rule for Hammerspoon (no toolchain required)
def _hammerspoon_test_impl(ctx):
    """Implementation of hammerspoon_test rule."""
    config = ctx.file.config
    test_script = ctx.actions.declare_file(ctx.label.name + ".sh")

    ctx.actions.write(
        output = test_script,
        content = """#!/bin/bash
set -euo pipefail

# Try to find lua in the system
if command -v luac >/dev/null 2>&1; then
    echo "Testing Hammerspoon configuration with luac"
    luac -p "{config}" || {{
        echo "Hammerspoon configuration has syntax errors"
        exit 1
    }}
elif command -v lua >/dev/null 2>&1; then
    echo "Testing Hammerspoon configuration with lua"
    lua -e "loadfile('{config}')" || {{
        echo "Hammerspoon configuration has syntax errors"
        exit 1
    }}
else
    echo "WARNING: No Lua interpreter found, skipping syntax check"
    echo "Hammerspoon configuration test skipped - no Lua interpreter found"
fi

echo "Hammerspoon configuration syntax is valid!"
exit 0
""".format(config = config.short_path),
        is_executable = True,
    )

    return [DefaultInfo(
        executable = test_script,
        runfiles = ctx.runfiles(files = [config]),
    )]

hammerspoon_test = rule(
    implementation = _hammerspoon_test_impl,
    attrs = {
        "config": attr.label(
            doc = "The Hammerspoon configuration file to test",
            allow_single_file = [".lua"],
            mandatory = True,
        ),
    },
    test = True,
)
