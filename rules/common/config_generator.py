#!/usr/bin/env python3
"""
Simple config file generator for dotfiles.

This script combines multiple configuration files with proper headers,
footers, and section comments based on file type.
"""

import argparse
import sys
from datetime import datetime
from pathlib import Path


def generate_config_file(
    output_path: str,
    input_files: list[str],
    rule_name: str,
    file_extension: str,
    comment_char: str = "#",
    header_template: str = "",
    footer_template: str = "",
    custom_header: str = "",
    custom_footer: str = ""
) -> None:
    """Generate a configuration file by combining input files."""
    
    with open(output_path, 'w') as output:
        # Write header
        if custom_header:
            # Handle $(date) expansion in custom header
            header_content = custom_header.replace('$(date)', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            output.write(header_content + '\n')
        elif header_template:
            output.write(header_template + '\n')
            output.write(f'{comment_char} Generated at: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
        else:
            output.write(f'{comment_char} {rule_name.title()} configuration generated by Bazel\n')
            output.write(f'{comment_char} Generated at: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
        
        output.write('\n')
        
        # Process each input file
        for input_file in input_files:
            file_path = Path(input_file)
            section_name = file_path.stem
            
            # Add section comment
            output.write(f'{comment_char} {section_name}\n')
            
            # Add file content
            try:
                with open(input_file, 'r') as infile:
                    output.write(infile.read())
            except FileNotFoundError:
                print(f"Warning: Input file not found: {input_file}", file=sys.stderr)
                continue
            
            # Ensure there's a newline after each section
            output.write('\n')
        
        # Write footer
        if custom_footer:
            output.write(custom_footer + '\n')
        elif footer_template:
            output.write(footer_template + '\n')
        else:
            output.write(f'{comment_char} End of generated {rule_name} configuration\n')


def main():
    parser = argparse.ArgumentParser(description='Generate configuration files from multiple sources')
    parser.add_argument('--output', required=True, help='Output file path')
    parser.add_argument('--inputs', nargs='+', required=True, help='Input file paths')
    parser.add_argument('--rule-name', required=True, help='Name of the rule (e.g., vim, git)')
    parser.add_argument('--file-extension', required=True, help='File extension (e.g., .vim, .lua)')
    parser.add_argument('--comment-char', default='#', help='Comment character for the file type')
    parser.add_argument('--header-template', default='', help='Default header template')
    parser.add_argument('--footer-template', default='', help='Default footer template')
    parser.add_argument('--custom-header', default='', help='Custom header content')
    parser.add_argument('--custom-footer', default='', help='Custom footer content')
    
    args = parser.parse_args()
    
    generate_config_file(
        output_path=args.output,
        input_files=args.inputs,
        rule_name=args.rule_name,
        file_extension=args.file_extension,
        comment_char=args.comment_char,
        header_template=args.header_template,
        footer_template=args.footer_template,
        custom_header=args.custom_header,
        custom_footer=args.custom_footer
    )


if __name__ == '__main__':
    main()